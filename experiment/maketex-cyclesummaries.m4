changecom(%)dnl
% This is an autogenerated tex file, do NOT edit!
% It is generated by the use of m4 macros.
%
% These are the benchmarks:
% 1-1: linear array access
% 1-2: linear array write
% 1-3: random array access
% 1-4: random array write
% 2-1: m채lardalen bsort 100
% 2-2: m채lardalen edn
% 2-3: m채lardalen matmult
% 3-1: sd-vbs disparity
%
% This m4 macro file expects the following 4 parameters:
%  -Dfilename: filename of the CSV file containing the data
%  -Dconfig_series: configuration of series of benchmarks to cores, like e.g. '2111'
%  -Dconfig_benchmarks: configuration of benchmarks to cores, like e.g. '3344'
%  -Dlabel: label of the experiment that was run
dnl
divert(`-1')
% Define forloop for iteration within m4
% forloop(var, from, to, stmt) - simple version, taken from GNU manual
define(`forloop', `pushdef(`$1', `$2')_forloop($@)popdef(`$1')')
define(`_forloop',
`$4`'ifelse($1, `$3', `', `define(`$1', incr($1))$0($@)')')
dnl
/* Number of benchmarks series  */
define(nr_of_benchmarks_series, 3)dnl
/* Maximum number of benchmarks per series is 9 */
define(nr_of_benchmarks, 9)dnl
/* Default configuration of series is '123' (but can be altered on the m4-cmdline) */
define(config_series, `321')dnl
/* Default configuration of benchmarks is '123' (but can be altered on the m4-cmdline) */
define(config_benchmarks, `123')dnl
/**
 * Benchmark name macros for lookup function
 */
dnl series nr 1: synthetic benchmarks
define(bench_name1_1, linear_array_access)dnl
define(bench_name1_2, linear_array_write)dnl
define(bench_name1_3, random_array_access)dnl
define(bench_name1_4, random_array_write)dnl
dnl series nr 2: M채lardalen
define(bench_name2_1, malardalen_bsort100)dnl
define(bench_name2_2, malardalen_edn)dnl
define(bench_name2_3, malardalen_matmult)dnl
dnl series nr 2: SD-VBS
define(bench_name3_1, sdvbs_disparity)dnl
define(bench_name, undefined)
dnl
define(lookup_name, `bench_name$1_$2')dnl
dnl
dnl % The label that characterizes the experiment
ifdef(`label', `', `define(label, `default')')
dnl %   but they can be redefined on the cmd line with:
dnl %  -Dconfig='foo' => redefine config as foo
dnl %  -Dlabel='bar'  => redefine label as bar
dnl % e.g.
dnl % m4 -Dconfig='1234' -Dlabel='TEST1' maketex-cyclesummaries.m4
dnl

dnl Definition of macro_loop
dnl
dnl This macro will run a for loop from the first argument
dnl to the second argument. In each iteration the third argument
dnl is called as a macro, with the index of the for loop as
dnl the macro's argument.
define(macro_loop, `forloop(`i', `$1', `$2', `$3(i)')')dnl
dnl
dnl
dnl Definition of macro_special_loop
dnl
dnl This macro will run a for loop from the first argument
dnl to the second argument. In each iteration the third argument
dnl is called as a macro, with two arguments:
dnl   1) the second argument to macro_special_loop
dnl   2) the iteration number i from the for loop.
define(macro_special_loop, `forloop(`i', `$1', `$2', `$3($4(i),i)')')
dnl define(meta3, `forloop(`i', `0', eval(len($1) - 1), `$2($3,`bench_name_from_config'`('i`)',i)')')
dnl meta3(`config', `template_addplot', `filename')dnl
dnl
dnl % bench_name_def
dnl %   parameters:
dnl %     $1 number of the benchmark to lookup
dnl % define(bench_name_from_config, `lookup_name(substr(config, eval($1-1), `1'))')
define(bench_name_from_config, `lookup_name(substr(config_series, $1, 1), substr(config_benchmarks, $1, 1))')
dnl
dnl % template_xlabel
define(template_xlabel, `alignment pattern --- cores starting time')dnl
dnl
dnl % template_addplot
dnl %   parameters:
dnl %     $1 benchmark name
dnl %     $2 core number
define(template_addplot, `
      \addplot+[]
      plot [
        error bars/.cd,
        y dir = both,
        y explicit,
      ]
      table [
        x expr = \coordindex,
        y expr = \thisrow{median-$1-core$2},
        y error expr = \thisrow{std-$1-core$2},
      ] {filename};
      \addlegendentry{{\scriptsize Core $2 --- $1}}
')
dnl
dnl % template_figure
dnl %   parameters:
dnl %     $1 number of cores
define(template_figure, `dnl
\begin{figure}
  \centering
  \begin{tikzpicture}
    \begin{axis}
      [
        ybar,
        xlabel={template_xlabel},
        ylabel={Cycles},
        flexible xticklabels from table={filename}{datatype}{},
        xtick=data,
        x tick label style={rotate=45, anchor=north east, inner sep=0mm},
        % ytick distance=0.25,
        % ymin=0,
        % grid=major,
        bar width=0.1,
        enlarge x limits=0.5,
        legend style={at={(1.48,0.70)},anchor=south east},
        % nodes near coords,
      ]
dnl Call the macro_special loop for generating addplot templates in a for loop,
dnl for each core one template addplot is generated.
dnl Each call to template_addplot will take the benchmark name as an input argument,
dnl provided here as a macro for retrieving its name.
macro_special_loop(0, eval(len(config_series)-1),
                      `template_addplot', `bench_name_from_config')dnl
    \end{axis}
  \end{tikzpicture}
  \caption{Benchmarks running on $2 cores configuration config `label' label}
  \`label'{fig_cycles_`$2'cores_config`'config_series`_'config_benchmarks`_'label}
\end{figure}')dnl
divert(0)dnl
dnl
template_figure(`filename', len(config_series))
